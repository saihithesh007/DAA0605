import heapq
from collections import defaultdict

def max_probability(n, edges, succProb, start, end):
    graph = defaultdict(list)
    for (a, b), prob in zip(edges, succProb):
        graph[a].append((b, prob))
        graph[b].append((a, prob))

    max_prob = [0] * n
    max_prob[start] = 1
    heap = [(-1, start)]  # Priority queue with negative probabilities for max heap

    while heap:
        curr_prob, u = heapq.heappop(heap)
        curr_prob = -curr_prob
        if u == end:
            return curr_prob
        for v, prob in graph[u]:
            new_prob = curr_prob * prob
            if new_prob > max_prob[v]:
                max_prob[v] = new_prob
                heapq.heappush(heap, (-new_prob, v))

    return 0

# Example usage
n = 3
edges = [[0,1],[1,2],[0,2]]
succProb = [0.5,0.5,0.2]
start = 0
end = 2
print(max_probability(n, edges, succProb, start, end))  # Output: 0.25
