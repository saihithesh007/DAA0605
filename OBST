#include <stdio.h>
#include <limits.h>

#define MAX 100

void printMatrix(int mat[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            if (mat[i][j] == INT_MAX) printf("INF ");
            else printf("%d ", mat[i][j]);
        }
        printf("\n");
    }
}

void printRootMatrix(int root[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            if (root[i][j] == -1) printf("- ");
            else printf("%d ", root[i][j]);
        }
        printf("\n");
    }
}

void optimalBST(int keys[], int freq[], int n) {
    int cost[MAX][MAX];
    int root[MAX][MAX];
    int sum[MAX];

    for (int i = 0; i < n; i++) {
        cost[i][i] = freq[i];
        root[i][i] = i;
        for (int j = i + 1; j < n; j++) {
            cost[i][j] = INT_MAX;
            root[i][j] = -1;
        }
    }

    for (int length = 2; length <= n; length++) {
        for (int i = 0; i <= n - length; i++) {
            int j = i + length - 1;
            int total_freq = 0;
            for (int k = i; k <= j; k++) total_freq += freq[k];

            for (int r = i; r <= j; r++) {
                int c = ((r > i) ? cost[i][r - 1] : 0) + ((r < j) ? cost[r + 1][j] : 0) + total_freq;
                if (c < cost[i][j]) {
                    cost[i][j] = c;
                    root[i][j] = r;
                }
            }
        }
    }

    printf("Cost Matrix:\n");
    printMatrix(cost, n);
    printf("Root Matrix:\n");
    printRootMatrix(root, n);
    printf("Optimal cost of the OBST: %d\n", cost[0][n - 1]);
}

int main() {
    int keys[] = {10, 12, 16, 21};
    int freq[] = {4, 2, 6, 3};
    int n = sizeof(keys) / sizeof(keys[0]);

    optimalBST(keys, freq, n);

    return 0;
}
