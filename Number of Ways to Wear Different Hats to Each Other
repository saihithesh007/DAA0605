def numberOfWaysToWearDifferentHats(hats):
    MOD = 10**9 + 7
    n = len(hats)
    
    # 40 possible hats, and each bit represents whether a hat is available or not
    # Create a list where each entry is a bitmask representing people who prefer that hat
    hat_masks = [0] * 41
    
    # Fill hat_masks with bitmasks
    for i, person_hats in enumerate(hats):
        for hat in person_hats:
            hat_masks[hat] |= (1 << i)
    
    # DP array for all possible states of people (2^n states)
    dp = [0] * (1 << n)
    dp[0] = 1
    
    # Iterate over each hat
    for hat in range(1, 41):
        mask = hat_masks[hat]
        if mask == 0:
            continue
        
        # Update dp array
        for current_mask in range((1 << n) - 1, -1, -1):
            if dp[current_mask] == 0:
                continue
            # Try to assign the current hat to people who like it
            new_mask = current_mask
            for i in range(n):
                if (mask & (1 << i)) and not (current_mask & (1 << i)):
                    new_mask |= (1 << i)
            dp[new_mask] = (dp[new_mask] + dp[current_mask]) % MOD
    
    # Result is the number of ways to assign hats such that all people get exactly one hat
    return dp[(1 << n) - 1]

# Example usage:
print(numberOfWaysToWearDifferentHats([[3,4],[4,5],[5]]))  # Output: 1
